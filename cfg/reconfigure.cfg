#!/usr/bin/env python
PACKAGE = "sl_controller"

import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()


INIT_PID     = gen.const("INIT_FILTER",              int_t, 0x00000001, "init_PID")
MISC            = gen.const("MISC",                     int_t, 0x00000002, "misc")


# Supply type
size_enum = gen.enum([ gen.const("Wire", int_t, 0, "Supply: Wire"),
                  gen.const("Battery_2200_mAh", int_t, 1, "Supply: battery 2200 mAh"),
                  gen.const("Battery_2700_mAh", int_t, 2, "Supply: battery 2700 mAh") ],
                  "Supply type")


#       Name                   Type      Reconfiguration level      Description                               Default     Min   Max
gen.add("Supply_type",         int_t,    MISC["value"],              "What kind of supply power will be used", 0,   0, 2, edit_method=size_enum)

gen.add("Load_0_200",          double_t, MISC["value"],              "Load hanging at the copter",            0,      	0,    2000)
gen.add("Frequency",           double_t, MISC["value"],              "frequency of the HLC",            30,      	0,    50)


gen.add("init_PID",            bool_t,   INIT_PID["value"],    	     "set the initial parameter (from file controller_patameter.yaml)",  False)

gen.add("load_param",          bool_t,   INIT_PID["value"],           "load parameter from a file or record the courrent",  False)

gen.add("use_param",           bool_t,   INIT_PID["value"],           "use the loaded or saved parameter",  False)

# Thrust
gen.add("thrust_K_P",          double_t, MISC["value"],              "K_P z PID controller",                   100,   	0, 		300)
gen.add("thrust_K_I",          double_t, MISC["value"],              "K_I z PID controller",                   10, 		0, 		30)
gen.add("thrust_K_D",          double_t, MISC["value"],              "K_D z PID controller",                   50,  	0,   	150)

gen.add("thrust_max_P",        double_t, MISC["value"],              "P_action max z PID controller",          30,   	0, 		100)
gen.add("thrust_max_I",        double_t, MISC["value"],              "I_action max z PID controlle",           30, 		0, 		100)
gen.add("thrust_max_D",        double_t, MISC["value"],              "D_action max z PID controlle",           40,  	0,   	100)
gen.add("thrust_max_PID",      double_t, MISC["value"],              "PID_action max z PID controlle",         200, 	0, 		500)

# Cross Track
	# Position Loop
gen.add("cross_pos_K_P",       double_t, MISC["value"],              "K_P cross position controller",          0.6,		0, 	    2)
gen.add("cross_pos_max_P",     double_t, MISC["value"],              "P_action max corss position controller", 0.8,     0,      3)

	# Rate Loop
gen.add("cross_rate_K_P",      double_t, MISC["value"],              "K_P cross rate controller",               0.2,       0,     1)
gen.add("cross_rate_K_D",      double_t, MISC["value"],              "K_D cross rate controller",               0,    	0,  0.1)
gen.add("cross_rate_max_P",    double_t, MISC["value"],              "P_action max cross rate controller",      0.2,         0,     1)
gen.add("cross_rate_max_D",    double_t, MISC["value"],              "D_action max cross rate controller",      0.2,         0,     1)
gen.add("cross_rate_max_PD",   double_t, MISC["value"],              "PD_action max cross rate controller",     0.2,       	0,     1)

# Along Track
	# Position Loop
gen.add("along_pos_K_P",       double_t, MISC["value"],              "K_P along position controller",           0.6,        0,          2)
gen.add("along_pos_max_P",     double_t, MISC["value"],              "P_action max along position controller",  0.8,        0,          3)

	# Rate Loop
gen.add("along_rate_K_P",      double_t, MISC["value"],              "K_P along rate controller",               0.2,        0,       1)
gen.add("along_rate_K_D",      double_t, MISC["value"],              "K_D along rate controller",               0,    	0,  	  0.1)
gen.add("along_rate_max_P",    double_t, MISC["value"],              "P_action max along rate controller",      0.2,          0,       1)
gen.add("along_rate_max_D",    double_t, MISC["value"],              "D_action max along rate controller",      0.2,          0,       1)
gen.add("along_rate_max_PD",   double_t, MISC["value"],              "PD_action max along rate controller",     0.2,       	 0,       1)

# Slung Load ***************
	# Delayed feedback
gen.add("N_Delay",             int_t, MISC["value"],       "Numbers of loops to wait untill feeding the angles",	3,       	0,     20)
gen.add("G_d",                 double_t, MISC["value"],       "Gain on the load angles",                            0,       	0,     0.5)
gen.add("l_L",                 double_t, MISC["value"],       "length from the copter CoG to puppet CoG",           0.6,      	0,     2)
gen.add("df_sign_ct",          double_t, MISC["value"],       "Sign for delay cross track",	    					1,       	-1,     1)
gen.add("df_sign_at",          double_t, MISC["value"],       "Sign for delay along track",	    					1,       	-1,     1)

	# Input shaper
gen.add("is_on",             int_t, MISC["value"],       "turn input shaper on and off",	    0,       	0,     1)
gen.add("is_N_impulses",     int_t, MISC["value"],       "Number of impulses",	    		2,       	1,     5)
gen.add("is_omega_ct",       double_t, MISC["value"],       "Frequency cross track",	    	0.5,       	0,     10)
gen.add("is_omega_at",       double_t, MISC["value"],       "Frequency along track",	    	0.5,       	0,     10)
gen.add("is_zeta_ct",        double_t, MISC["value"],       "damping cross track",	    		0.1,       	0,     1)
gen.add("is_zeta_at",        double_t, MISC["value"],       "damping along track",	    		0.1,       	0,     1)
# End Slung Load **********

# test
gen.add("test1",             double_t, MISC["value"],       "debug channel 1",	    0,       	-100,     100)
gen.add("test2",             double_t, MISC["value"],       "debug channel 2",	    0,       	-100,     100)
gen.add("test3",             double_t, MISC["value"],       "debug channel 3",	    0,       	-100,     100)


#init coordinate system
gen.add("init_coordinate",     bool_t,   INIT_PID["value"],    	     "initialize the coordinate system where the copter in this moment is",  False)

exit(gen.generate(PACKAGE, "sl_controller", "reconfigure"))
