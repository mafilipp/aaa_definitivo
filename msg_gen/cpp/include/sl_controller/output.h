/* Auto-generated by genmsg_cpp for file /home/mafilipp/fuerte_workspace/sandbox/sl_controller/msg/output.msg */
#ifndef SL_CONTROLLER_MESSAGE_OUTPUT_H
#define SL_CONTROLLER_MESSAGE_OUTPUT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace sl_controller
{
template <class ContainerAllocator>
struct output_ {
  typedef output_<ContainerAllocator> Type;

  output_()
  : header()
  , z_err(0.0)
  , p_action_thrust(0.0)
  , i_action_thrust(0.0)
  , d_action_thrust(0.0)
  , e_ct(0.0)
  , df_delta_pos_ct(0.0)
  , e_ct_feed(0.0)
  , des_cross_rate(0.0)
  , des_cross_rate_shaped(0.0)
  , df_delta_vel_ct(0.0)
  , des_cross_rate_feed(0.0)
  , cross_rate_is(0.0)
  , ct_p_action(0.0)
  , ct_d_action(0.0)
  , e_at(0.0)
  , df_delta_pos_at(0.0)
  , e_at_feed(0.0)
  , des_along_rate(0.0)
  , des_along_rate_shaped(0.0)
  , df_delta_vel_at(0.0)
  , des_along_rate_feed(0.0)
  , along_rate_is(0.0)
  , at_p_action(0.0)
  , at_d_action(0.0)
  {
  }

  output_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , z_err(0.0)
  , p_action_thrust(0.0)
  , i_action_thrust(0.0)
  , d_action_thrust(0.0)
  , e_ct(0.0)
  , df_delta_pos_ct(0.0)
  , e_ct_feed(0.0)
  , des_cross_rate(0.0)
  , des_cross_rate_shaped(0.0)
  , df_delta_vel_ct(0.0)
  , des_cross_rate_feed(0.0)
  , cross_rate_is(0.0)
  , ct_p_action(0.0)
  , ct_d_action(0.0)
  , e_at(0.0)
  , df_delta_pos_at(0.0)
  , e_at_feed(0.0)
  , des_along_rate(0.0)
  , des_along_rate_shaped(0.0)
  , df_delta_vel_at(0.0)
  , des_along_rate_feed(0.0)
  , along_rate_is(0.0)
  , at_p_action(0.0)
  , at_d_action(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _z_err_type;
  double z_err;

  typedef double _p_action_thrust_type;
  double p_action_thrust;

  typedef double _i_action_thrust_type;
  double i_action_thrust;

  typedef double _d_action_thrust_type;
  double d_action_thrust;

  typedef double _e_ct_type;
  double e_ct;

  typedef double _df_delta_pos_ct_type;
  double df_delta_pos_ct;

  typedef double _e_ct_feed_type;
  double e_ct_feed;

  typedef double _des_cross_rate_type;
  double des_cross_rate;

  typedef double _des_cross_rate_shaped_type;
  double des_cross_rate_shaped;

  typedef double _df_delta_vel_ct_type;
  double df_delta_vel_ct;

  typedef double _des_cross_rate_feed_type;
  double des_cross_rate_feed;

  typedef double _cross_rate_is_type;
  double cross_rate_is;

  typedef double _ct_p_action_type;
  double ct_p_action;

  typedef double _ct_d_action_type;
  double ct_d_action;

  typedef double _e_at_type;
  double e_at;

  typedef double _df_delta_pos_at_type;
  double df_delta_pos_at;

  typedef double _e_at_feed_type;
  double e_at_feed;

  typedef double _des_along_rate_type;
  double des_along_rate;

  typedef double _des_along_rate_shaped_type;
  double des_along_rate_shaped;

  typedef double _df_delta_vel_at_type;
  double df_delta_vel_at;

  typedef double _des_along_rate_feed_type;
  double des_along_rate_feed;

  typedef double _along_rate_is_type;
  double along_rate_is;

  typedef double _at_p_action_type;
  double at_p_action;

  typedef double _at_d_action_type;
  double at_d_action;


  typedef boost::shared_ptr< ::sl_controller::output_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sl_controller::output_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct output
typedef  ::sl_controller::output_<std::allocator<void> > output;

typedef boost::shared_ptr< ::sl_controller::output> outputPtr;
typedef boost::shared_ptr< ::sl_controller::output const> outputConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sl_controller::output_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sl_controller::output_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sl_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sl_controller::output_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sl_controller::output_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sl_controller::output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "79aa250817a9fe09a3e6ab8422b2c793";
  }

  static const char* value(const  ::sl_controller::output_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x79aa250817a9fe09ULL;
  static const uint64_t static_value2 = 0xa3e6ab8422b2c793ULL;
};

template<class ContainerAllocator>
struct DataType< ::sl_controller::output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sl_controller/output";
  }

  static const char* value(const  ::sl_controller::output_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sl_controller::output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header    header\n\
\n\
float64 z_err\n\
float64 p_action_thrust\n\
float64 i_action_thrust\n\
float64 d_action_thrust\n\
float64 e_ct\n\
float64 df_delta_pos_ct\n\
float64 e_ct_feed\n\
float64 des_cross_rate\n\
float64 des_cross_rate_shaped\n\
float64 df_delta_vel_ct\n\
float64 des_cross_rate_feed\n\
float64 cross_rate_is\n\
float64 ct_p_action\n\
float64 ct_d_action\n\
float64 e_at\n\
float64 df_delta_pos_at\n\
float64 e_at_feed\n\
float64 des_along_rate\n\
float64 des_along_rate_shaped\n\
float64 df_delta_vel_at\n\
float64 des_along_rate_feed\n\
float64 along_rate_is\n\
float64 at_p_action\n\
float64 at_d_action\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::sl_controller::output_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::sl_controller::output_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::sl_controller::output_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sl_controller::output_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.z_err);
    stream.next(m.p_action_thrust);
    stream.next(m.i_action_thrust);
    stream.next(m.d_action_thrust);
    stream.next(m.e_ct);
    stream.next(m.df_delta_pos_ct);
    stream.next(m.e_ct_feed);
    stream.next(m.des_cross_rate);
    stream.next(m.des_cross_rate_shaped);
    stream.next(m.df_delta_vel_ct);
    stream.next(m.des_cross_rate_feed);
    stream.next(m.cross_rate_is);
    stream.next(m.ct_p_action);
    stream.next(m.ct_d_action);
    stream.next(m.e_at);
    stream.next(m.df_delta_pos_at);
    stream.next(m.e_at_feed);
    stream.next(m.des_along_rate);
    stream.next(m.des_along_rate_shaped);
    stream.next(m.df_delta_vel_at);
    stream.next(m.des_along_rate_feed);
    stream.next(m.along_rate_is);
    stream.next(m.at_p_action);
    stream.next(m.at_d_action);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct output_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sl_controller::output_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sl_controller::output_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "z_err: ";
    Printer<double>::stream(s, indent + "  ", v.z_err);
    s << indent << "p_action_thrust: ";
    Printer<double>::stream(s, indent + "  ", v.p_action_thrust);
    s << indent << "i_action_thrust: ";
    Printer<double>::stream(s, indent + "  ", v.i_action_thrust);
    s << indent << "d_action_thrust: ";
    Printer<double>::stream(s, indent + "  ", v.d_action_thrust);
    s << indent << "e_ct: ";
    Printer<double>::stream(s, indent + "  ", v.e_ct);
    s << indent << "df_delta_pos_ct: ";
    Printer<double>::stream(s, indent + "  ", v.df_delta_pos_ct);
    s << indent << "e_ct_feed: ";
    Printer<double>::stream(s, indent + "  ", v.e_ct_feed);
    s << indent << "des_cross_rate: ";
    Printer<double>::stream(s, indent + "  ", v.des_cross_rate);
    s << indent << "des_cross_rate_shaped: ";
    Printer<double>::stream(s, indent + "  ", v.des_cross_rate_shaped);
    s << indent << "df_delta_vel_ct: ";
    Printer<double>::stream(s, indent + "  ", v.df_delta_vel_ct);
    s << indent << "des_cross_rate_feed: ";
    Printer<double>::stream(s, indent + "  ", v.des_cross_rate_feed);
    s << indent << "cross_rate_is: ";
    Printer<double>::stream(s, indent + "  ", v.cross_rate_is);
    s << indent << "ct_p_action: ";
    Printer<double>::stream(s, indent + "  ", v.ct_p_action);
    s << indent << "ct_d_action: ";
    Printer<double>::stream(s, indent + "  ", v.ct_d_action);
    s << indent << "e_at: ";
    Printer<double>::stream(s, indent + "  ", v.e_at);
    s << indent << "df_delta_pos_at: ";
    Printer<double>::stream(s, indent + "  ", v.df_delta_pos_at);
    s << indent << "e_at_feed: ";
    Printer<double>::stream(s, indent + "  ", v.e_at_feed);
    s << indent << "des_along_rate: ";
    Printer<double>::stream(s, indent + "  ", v.des_along_rate);
    s << indent << "des_along_rate_shaped: ";
    Printer<double>::stream(s, indent + "  ", v.des_along_rate_shaped);
    s << indent << "df_delta_vel_at: ";
    Printer<double>::stream(s, indent + "  ", v.df_delta_vel_at);
    s << indent << "des_along_rate_feed: ";
    Printer<double>::stream(s, indent + "  ", v.des_along_rate_feed);
    s << indent << "along_rate_is: ";
    Printer<double>::stream(s, indent + "  ", v.along_rate_is);
    s << indent << "at_p_action: ";
    Printer<double>::stream(s, indent + "  ", v.at_p_action);
    s << indent << "at_d_action: ";
    Printer<double>::stream(s, indent + "  ", v.at_d_action);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SL_CONTROLLER_MESSAGE_OUTPUT_H

