/* Auto-generated by genmsg_cpp for file /home/mafilipp/fuerte_workspace/sandbox/sl_controller/msg/psi_debugging.msg */
#ifndef SL_CONTROLLER_MESSAGE_PSI_DEBUGGING_H
#define SL_CONTROLLER_MESSAGE_PSI_DEBUGGING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace sl_controller
{
template <class ContainerAllocator>
struct psi_debugging_ {
  typedef psi_debugging_<ContainerAllocator> Type;

  psi_debugging_()
  : header()
  , psi_ref(0.0)
  , psi_state(0.0)
  , e_psi(0.0)
  , psi_APM(0.0)
  , e_psi_corr(0.0)
  , psi_ref_APM(0.0)
  {
  }

  psi_debugging_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , psi_ref(0.0)
  , psi_state(0.0)
  , e_psi(0.0)
  , psi_APM(0.0)
  , e_psi_corr(0.0)
  , psi_ref_APM(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _psi_ref_type;
  double psi_ref;

  typedef double _psi_state_type;
  double psi_state;

  typedef double _e_psi_type;
  double e_psi;

  typedef double _psi_APM_type;
  double psi_APM;

  typedef double _e_psi_corr_type;
  double e_psi_corr;

  typedef double _psi_ref_APM_type;
  double psi_ref_APM;


  typedef boost::shared_ptr< ::sl_controller::psi_debugging_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sl_controller::psi_debugging_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct psi_debugging
typedef  ::sl_controller::psi_debugging_<std::allocator<void> > psi_debugging;

typedef boost::shared_ptr< ::sl_controller::psi_debugging> psi_debuggingPtr;
typedef boost::shared_ptr< ::sl_controller::psi_debugging const> psi_debuggingConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sl_controller::psi_debugging_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sl_controller::psi_debugging_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sl_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sl_controller::psi_debugging_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sl_controller::psi_debugging_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sl_controller::psi_debugging_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2653d294dcf7ae964444bf7debb02cd4";
  }

  static const char* value(const  ::sl_controller::psi_debugging_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2653d294dcf7ae96ULL;
  static const uint64_t static_value2 = 0x4444bf7debb02cd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::sl_controller::psi_debugging_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sl_controller/psi_debugging";
  }

  static const char* value(const  ::sl_controller::psi_debugging_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sl_controller::psi_debugging_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header    header\n\
\n\
float64 psi_ref\n\
float64 psi_state\n\
float64 e_psi\n\
float64 psi_APM\n\
float64 e_psi_corr\n\
float64 psi_ref_APM\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::sl_controller::psi_debugging_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::sl_controller::psi_debugging_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::sl_controller::psi_debugging_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sl_controller::psi_debugging_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.psi_ref);
    stream.next(m.psi_state);
    stream.next(m.e_psi);
    stream.next(m.psi_APM);
    stream.next(m.e_psi_corr);
    stream.next(m.psi_ref_APM);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct psi_debugging_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sl_controller::psi_debugging_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sl_controller::psi_debugging_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "psi_ref: ";
    Printer<double>::stream(s, indent + "  ", v.psi_ref);
    s << indent << "psi_state: ";
    Printer<double>::stream(s, indent + "  ", v.psi_state);
    s << indent << "e_psi: ";
    Printer<double>::stream(s, indent + "  ", v.e_psi);
    s << indent << "psi_APM: ";
    Printer<double>::stream(s, indent + "  ", v.psi_APM);
    s << indent << "e_psi_corr: ";
    Printer<double>::stream(s, indent + "  ", v.e_psi_corr);
    s << indent << "psi_ref_APM: ";
    Printer<double>::stream(s, indent + "  ", v.psi_ref_APM);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SL_CONTROLLER_MESSAGE_PSI_DEBUGGING_H

