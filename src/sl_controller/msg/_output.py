"""autogenerated by genpy from sl_controller/output.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class output(genpy.Message):
  _md5sum = "79aa250817a9fe09a3e6ab8422b2c793"
  _type = "sl_controller/output"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header    header

float64 z_err
float64 p_action_thrust
float64 i_action_thrust
float64 d_action_thrust
float64 e_ct
float64 df_delta_pos_ct
float64 e_ct_feed
float64 des_cross_rate
float64 des_cross_rate_shaped
float64 df_delta_vel_ct
float64 des_cross_rate_feed
float64 cross_rate_is
float64 ct_p_action
float64 ct_d_action
float64 e_at
float64 df_delta_pos_at
float64 e_at_feed
float64 des_along_rate
float64 des_along_rate_shaped
float64 df_delta_vel_at
float64 des_along_rate_feed
float64 along_rate_is
float64 at_p_action
float64 at_d_action
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','z_err','p_action_thrust','i_action_thrust','d_action_thrust','e_ct','df_delta_pos_ct','e_ct_feed','des_cross_rate','des_cross_rate_shaped','df_delta_vel_ct','des_cross_rate_feed','cross_rate_is','ct_p_action','ct_d_action','e_at','df_delta_pos_at','e_at_feed','des_along_rate','des_along_rate_shaped','df_delta_vel_at','des_along_rate_feed','along_rate_is','at_p_action','at_d_action']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,z_err,p_action_thrust,i_action_thrust,d_action_thrust,e_ct,df_delta_pos_ct,e_ct_feed,des_cross_rate,des_cross_rate_shaped,df_delta_vel_ct,des_cross_rate_feed,cross_rate_is,ct_p_action,ct_d_action,e_at,df_delta_pos_at,e_at_feed,des_along_rate,des_along_rate_shaped,df_delta_vel_at,des_along_rate_feed,along_rate_is,at_p_action,at_d_action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(output, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.z_err is None:
        self.z_err = 0.
      if self.p_action_thrust is None:
        self.p_action_thrust = 0.
      if self.i_action_thrust is None:
        self.i_action_thrust = 0.
      if self.d_action_thrust is None:
        self.d_action_thrust = 0.
      if self.e_ct is None:
        self.e_ct = 0.
      if self.df_delta_pos_ct is None:
        self.df_delta_pos_ct = 0.
      if self.e_ct_feed is None:
        self.e_ct_feed = 0.
      if self.des_cross_rate is None:
        self.des_cross_rate = 0.
      if self.des_cross_rate_shaped is None:
        self.des_cross_rate_shaped = 0.
      if self.df_delta_vel_ct is None:
        self.df_delta_vel_ct = 0.
      if self.des_cross_rate_feed is None:
        self.des_cross_rate_feed = 0.
      if self.cross_rate_is is None:
        self.cross_rate_is = 0.
      if self.ct_p_action is None:
        self.ct_p_action = 0.
      if self.ct_d_action is None:
        self.ct_d_action = 0.
      if self.e_at is None:
        self.e_at = 0.
      if self.df_delta_pos_at is None:
        self.df_delta_pos_at = 0.
      if self.e_at_feed is None:
        self.e_at_feed = 0.
      if self.des_along_rate is None:
        self.des_along_rate = 0.
      if self.des_along_rate_shaped is None:
        self.des_along_rate_shaped = 0.
      if self.df_delta_vel_at is None:
        self.df_delta_vel_at = 0.
      if self.des_along_rate_feed is None:
        self.des_along_rate_feed = 0.
      if self.along_rate_is is None:
        self.along_rate_is = 0.
      if self.at_p_action is None:
        self.at_p_action = 0.
      if self.at_d_action is None:
        self.at_d_action = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.z_err = 0.
      self.p_action_thrust = 0.
      self.i_action_thrust = 0.
      self.d_action_thrust = 0.
      self.e_ct = 0.
      self.df_delta_pos_ct = 0.
      self.e_ct_feed = 0.
      self.des_cross_rate = 0.
      self.des_cross_rate_shaped = 0.
      self.df_delta_vel_ct = 0.
      self.des_cross_rate_feed = 0.
      self.cross_rate_is = 0.
      self.ct_p_action = 0.
      self.ct_d_action = 0.
      self.e_at = 0.
      self.df_delta_pos_at = 0.
      self.e_at_feed = 0.
      self.des_along_rate = 0.
      self.des_along_rate_shaped = 0.
      self.df_delta_vel_at = 0.
      self.des_along_rate_feed = 0.
      self.along_rate_is = 0.
      self.at_p_action = 0.
      self.at_d_action = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_24d.pack(_x.z_err, _x.p_action_thrust, _x.i_action_thrust, _x.d_action_thrust, _x.e_ct, _x.df_delta_pos_ct, _x.e_ct_feed, _x.des_cross_rate, _x.des_cross_rate_shaped, _x.df_delta_vel_ct, _x.des_cross_rate_feed, _x.cross_rate_is, _x.ct_p_action, _x.ct_d_action, _x.e_at, _x.df_delta_pos_at, _x.e_at_feed, _x.des_along_rate, _x.des_along_rate_shaped, _x.df_delta_vel_at, _x.des_along_rate_feed, _x.along_rate_is, _x.at_p_action, _x.at_d_action))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 192
      (_x.z_err, _x.p_action_thrust, _x.i_action_thrust, _x.d_action_thrust, _x.e_ct, _x.df_delta_pos_ct, _x.e_ct_feed, _x.des_cross_rate, _x.des_cross_rate_shaped, _x.df_delta_vel_ct, _x.des_cross_rate_feed, _x.cross_rate_is, _x.ct_p_action, _x.ct_d_action, _x.e_at, _x.df_delta_pos_at, _x.e_at_feed, _x.des_along_rate, _x.des_along_rate_shaped, _x.df_delta_vel_at, _x.des_along_rate_feed, _x.along_rate_is, _x.at_p_action, _x.at_d_action,) = _struct_24d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_24d.pack(_x.z_err, _x.p_action_thrust, _x.i_action_thrust, _x.d_action_thrust, _x.e_ct, _x.df_delta_pos_ct, _x.e_ct_feed, _x.des_cross_rate, _x.des_cross_rate_shaped, _x.df_delta_vel_ct, _x.des_cross_rate_feed, _x.cross_rate_is, _x.ct_p_action, _x.ct_d_action, _x.e_at, _x.df_delta_pos_at, _x.e_at_feed, _x.des_along_rate, _x.des_along_rate_shaped, _x.df_delta_vel_at, _x.des_along_rate_feed, _x.along_rate_is, _x.at_p_action, _x.at_d_action))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 192
      (_x.z_err, _x.p_action_thrust, _x.i_action_thrust, _x.d_action_thrust, _x.e_ct, _x.df_delta_pos_ct, _x.e_ct_feed, _x.des_cross_rate, _x.des_cross_rate_shaped, _x.df_delta_vel_ct, _x.des_cross_rate_feed, _x.cross_rate_is, _x.ct_p_action, _x.ct_d_action, _x.e_at, _x.df_delta_pos_at, _x.e_at_feed, _x.des_along_rate, _x.des_along_rate_shaped, _x.df_delta_vel_at, _x.des_along_rate_feed, _x.along_rate_is, _x.at_p_action, _x.at_d_action,) = _struct_24d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_24d = struct.Struct("<24d")
_struct_3I = struct.Struct("<3I")
