#include "SimulinkTest.hpp"

SimulinkTest::SimulinkTest()
{
    sub_ = nh_.subscribe("imu", 1000, &SimulinkTest::imuCallback, this);
    pub_ = nh_.advertise<sensor_msgs::Imu>("imu_offset", 1000);
}

SimulinkTest::~SimulinkTest()
{
}

void SimulinkTest::imuCallback(const sensor_msgs::Imu::ConstPtr& msg)
{
    sensor_msgs::Imu outMsg;
    outMsg = *msg;
    ROS_INFO("XXX before adding an offset %f", msg->linear_acceleration.x);
//----------------
    ROS_INFO("YYY before adding an offset %f", msg->linear_acceleration.y);
    ROS_INFO("ZZZ before adding an offset %f", msg->linear_acceleration.z);

    simulink_model_U.x = msg->linear_acceleration.x;
//----------------
    simulink_model_U.y = msg->linear_acceleration.y;
    simulink_model_U.z = msg->linear_acceleration.z;
    

    simulink_example_step();
 
//----------------   
    outMsg.linear_acceleration.x = simulink_example_Y.set_thrust;



    ROS_INFO("set_thrust %f", outMsg.linear_acceleration.x);
//----------------

    pub_.publish(outMsg);
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "simulink_model");

  ROS_INFO("Program: set_thrust");

  SimulinkTest sim;
  
  //simulink_example_initialize();
  ros::spin();
  //simulink_example_terminate();

  return 0;
}
